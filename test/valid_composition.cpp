#include <catch2/catch.hpp>
#include <GL/gl.h>

#include "helpers.hpp"


TEST_CASE("ktxtest/ktx/valid/composition/array_2_elements_1d.ktx")
{
	testValid("ktxtest/ktx/valid/composition/array_2_elements_1d.ktx", {
		GL_TEXTURE_1D_ARRAY,2,7,GL_R8,64,2,1,false,false,false, {
			{GL_TEXTURE_1D_ARRAY,0,GL_R8,64,2,1,GL_RED,GL_UNSIGNED_BYTE,128,0x00,0xFF,0x00,0xCC},
			{GL_TEXTURE_1D_ARRAY,1,GL_R8,32,2,1,GL_RED,GL_UNSIGNED_BYTE, 64,0x11,0x11,0x11,0x11},
			{GL_TEXTURE_1D_ARRAY,2,GL_R8,16,2,1,GL_RED,GL_UNSIGNED_BYTE, 32,0x22,0x22,0x22,0x22},
			{GL_TEXTURE_1D_ARRAY,3,GL_R8, 8,2,1,GL_RED,GL_UNSIGNED_BYTE, 16,0x33,0x33,0x33,0x33},
			{GL_TEXTURE_1D_ARRAY,4,GL_R8, 4,2,1,GL_RED,GL_UNSIGNED_BYTE,  8,0x44,0x44,0x44,0x44},
			{GL_TEXTURE_1D_ARRAY,5,GL_R8, 2,2,1,GL_RED,GL_UNSIGNED_BYTE,  8,0x55,0x55,0x00,0x00},
			{GL_TEXTURE_1D_ARRAY,6,GL_R8, 1,2,1,GL_RED,GL_UNSIGNED_BYTE,  8,0x66,0x00,0x00,0x00} }});
}


TEST_CASE("ktxtest/ktx/valid/composition/array_2_elements_2d.ktx")
{
	testValid("ktxtest/ktx/valid/composition/array_2_elements_2d.ktx", {
		GL_TEXTURE_2D_ARRAY,3,7,GL_R8,64,64,2,false,false,false, {
			{GL_TEXTURE_2D_ARRAY,0,GL_R8,64,64,2,GL_RED,GL_UNSIGNED_BYTE,8192,0x00,0x00,0x00,0x00},
			{GL_TEXTURE_2D_ARRAY,1,GL_R8,32,32,2,GL_RED,GL_UNSIGNED_BYTE,2048,0x11,0x11,0x11,0x11},
			{GL_TEXTURE_2D_ARRAY,2,GL_R8,16,16,2,GL_RED,GL_UNSIGNED_BYTE, 512,0x22,0x22,0x22,0x22},
			{GL_TEXTURE_2D_ARRAY,3,GL_R8, 8, 8,2,GL_RED,GL_UNSIGNED_BYTE, 128,0x33,0x33,0x33,0x33},
			{GL_TEXTURE_2D_ARRAY,4,GL_R8, 4, 4,2,GL_RED,GL_UNSIGNED_BYTE,  32,0x44,0x44,0x44,0x44},
			{GL_TEXTURE_2D_ARRAY,5,GL_R8, 2, 2,2,GL_RED,GL_UNSIGNED_BYTE,  16,0x55,0x55,0x00,0x00},
			{GL_TEXTURE_2D_ARRAY,6,GL_R8, 1, 1,2,GL_RED,GL_UNSIGNED_BYTE,   8,0x66,0x00,0x00,0x00} }});
}


TEST_CASE("ktxtest/ktx/valid/composition/array_2_elements_3d.ktx")
{
	// Technically valid, but not supported by OpenGL.
	testInvalid("ktxtest/ktx/valid/composition/array_2_elements_3d.ktx");
}


TEST_CASE("ktxtest/ktx/valid/composition/array_2_elements_cubemap_6_faces.ktx")
{
	testValid("ktxtest/ktx/valid/composition/array_2_elements_cubemap_6_faces.ktx", {
		GL_TEXTURE_CUBE_MAP_ARRAY,3,7,GL_RGB8,64,64,12,false,false,false, {
			{GL_TEXTURE_CUBE_MAP_ARRAY,0,GL_RGB8,64,64,12,GL_RGB,GL_UNSIGNED_BYTE,147456,0xFF,0x00,0x00,0xFF},
			{GL_TEXTURE_CUBE_MAP_ARRAY,1,GL_RGB8,32,32,12,GL_RGB,GL_UNSIGNED_BYTE, 36864,0xFF,0x11,0x11,0xFF},
			{GL_TEXTURE_CUBE_MAP_ARRAY,2,GL_RGB8,16,16,12,GL_RGB,GL_UNSIGNED_BYTE,  9216,0xFF,0x22,0x22,0xFF},
			{GL_TEXTURE_CUBE_MAP_ARRAY,3,GL_RGB8, 8, 8,12,GL_RGB,GL_UNSIGNED_BYTE,  2304,0xFF,0x33,0x33,0xFF},
			{GL_TEXTURE_CUBE_MAP_ARRAY,4,GL_RGB8, 4, 4,12,GL_RGB,GL_UNSIGNED_BYTE,   576,0xFF,0x44,0x44,0xFF},
			{GL_TEXTURE_CUBE_MAP_ARRAY,5,GL_RGB8, 2, 2,12,GL_RGB,GL_UNSIGNED_BYTE,   192,0xFF,0x55,0x55,0xFF},
			{GL_TEXTURE_CUBE_MAP_ARRAY,6,GL_RGB8, 1, 1,12,GL_RGB,GL_UNSIGNED_BYTE,    48,0xFF,0x66,0x66,0x00} }});
}


TEST_CASE("ktxtest/ktx/valid/composition/cubemap_2_faces.ktx")
{
	// Technically valid, but considered incomplete by OpenGL.
	testInvalid("ktxtest/ktx/valid/composition/cubemap_2_faces.ktx");
}


TEST_CASE("ktxtest/ktx/valid/composition/cubemap_6_faces.ktx")
{
	testValid("ktxtest/ktx/valid/composition/cubemap_6_faces.ktx", {
		GL_TEXTURE_CUBE_MAP,2,7,GL_RGB8,64,64,1,false,false,false, {
			{GL_TEXTURE_CUBE_MAP_POSITIVE_X,0,GL_RGB8,64,64,1,GL_RGB,GL_UNSIGNED_BYTE,12288,0xFF,0x00,0x00,0xFF},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_X,0,GL_RGB8,64,64,1,GL_RGB,GL_UNSIGNED_BYTE,12288,0xFF,0xFF,0x00,0xFF},
			{GL_TEXTURE_CUBE_MAP_POSITIVE_Y,0,GL_RGB8,64,64,1,GL_RGB,GL_UNSIGNED_BYTE,12288,0x00,0xFF,0x00,0x00},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,0,GL_RGB8,64,64,1,GL_RGB,GL_UNSIGNED_BYTE,12288,0x00,0xFF,0xFF,0x00},
			{GL_TEXTURE_CUBE_MAP_POSITIVE_Z,0,GL_RGB8,64,64,1,GL_RGB,GL_UNSIGNED_BYTE,12288,0x00,0x00,0xFF,0x00},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,0,GL_RGB8,64,64,1,GL_RGB,GL_UNSIGNED_BYTE,12288,0xFF,0x00,0xFF,0xFF},
			{GL_TEXTURE_CUBE_MAP_POSITIVE_X,1,GL_RGB8,32,32,1,GL_RGB,GL_UNSIGNED_BYTE, 3072,0xFF,0x11,0x11,0xFF},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_X,1,GL_RGB8,32,32,1,GL_RGB,GL_UNSIGNED_BYTE, 3072,0xFF,0xFF,0x11,0xFF},
			{GL_TEXTURE_CUBE_MAP_POSITIVE_Y,1,GL_RGB8,32,32,1,GL_RGB,GL_UNSIGNED_BYTE, 3072,0x11,0xFF,0x11,0x11},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,1,GL_RGB8,32,32,1,GL_RGB,GL_UNSIGNED_BYTE, 3072,0x11,0xFF,0xFF,0x11},
			{GL_TEXTURE_CUBE_MAP_POSITIVE_Z,1,GL_RGB8,32,32,1,GL_RGB,GL_UNSIGNED_BYTE, 3072,0x11,0x11,0xFF,0x11},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,1,GL_RGB8,32,32,1,GL_RGB,GL_UNSIGNED_BYTE, 3072,0xFF,0x11,0xFF,0xFF},
			{GL_TEXTURE_CUBE_MAP_POSITIVE_X,2,GL_RGB8,16,16,1,GL_RGB,GL_UNSIGNED_BYTE,  768,0xFF,0x22,0x22,0xFF},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_X,2,GL_RGB8,16,16,1,GL_RGB,GL_UNSIGNED_BYTE,  768,0xFF,0xFF,0x22,0xFF},
			{GL_TEXTURE_CUBE_MAP_POSITIVE_Y,2,GL_RGB8,16,16,1,GL_RGB,GL_UNSIGNED_BYTE,  768,0x22,0xFF,0x22,0x22},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,2,GL_RGB8,16,16,1,GL_RGB,GL_UNSIGNED_BYTE,  768,0x22,0xFF,0xFF,0x22},
			{GL_TEXTURE_CUBE_MAP_POSITIVE_Z,2,GL_RGB8,16,16,1,GL_RGB,GL_UNSIGNED_BYTE,  768,0x22,0x22,0xFF,0x22},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,2,GL_RGB8,16,16,1,GL_RGB,GL_UNSIGNED_BYTE,  768,0xFF,0x22,0xFF,0xFF},
			{GL_TEXTURE_CUBE_MAP_POSITIVE_X,3,GL_RGB8, 8, 8,1,GL_RGB,GL_UNSIGNED_BYTE,  192,0xFF,0x33,0x33,0xFF},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_X,3,GL_RGB8, 8, 8,1,GL_RGB,GL_UNSIGNED_BYTE,  192,0xFF,0xFF,0x33,0xFF},
			{GL_TEXTURE_CUBE_MAP_POSITIVE_Y,3,GL_RGB8, 8, 8,1,GL_RGB,GL_UNSIGNED_BYTE,  192,0x33,0xFF,0x33,0x33},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,3,GL_RGB8, 8, 8,1,GL_RGB,GL_UNSIGNED_BYTE,  192,0x33,0xFF,0xFF,0x33},
			{GL_TEXTURE_CUBE_MAP_POSITIVE_Z,3,GL_RGB8, 8, 8,1,GL_RGB,GL_UNSIGNED_BYTE,  192,0x33,0x33,0xFF,0x33},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,3,GL_RGB8, 8, 8,1,GL_RGB,GL_UNSIGNED_BYTE,  192,0xFF,0x33,0xFF,0xFF},
			{GL_TEXTURE_CUBE_MAP_POSITIVE_X,4,GL_RGB8, 4, 4,1,GL_RGB,GL_UNSIGNED_BYTE,   48,0xFF,0x44,0x44,0xFF},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_X,4,GL_RGB8, 4, 4,1,GL_RGB,GL_UNSIGNED_BYTE,   48,0xFF,0xFF,0x44,0xFF},
			{GL_TEXTURE_CUBE_MAP_POSITIVE_Y,4,GL_RGB8, 4, 4,1,GL_RGB,GL_UNSIGNED_BYTE,   48,0x44,0xFF,0x44,0x44},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,4,GL_RGB8, 4, 4,1,GL_RGB,GL_UNSIGNED_BYTE,   48,0x44,0xFF,0xFF,0x44},
			{GL_TEXTURE_CUBE_MAP_POSITIVE_Z,4,GL_RGB8, 4, 4,1,GL_RGB,GL_UNSIGNED_BYTE,   48,0x44,0x44,0xFF,0x44},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,4,GL_RGB8, 4, 4,1,GL_RGB,GL_UNSIGNED_BYTE,   48,0xFF,0x44,0xFF,0xFF},
			{GL_TEXTURE_CUBE_MAP_POSITIVE_X,5,GL_RGB8, 2, 2,1,GL_RGB,GL_UNSIGNED_BYTE,   16,0xFF,0x55,0x55,0xFF},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_X,5,GL_RGB8, 2, 2,1,GL_RGB,GL_UNSIGNED_BYTE,   16,0xFF,0xFF,0x55,0xFF},
			{GL_TEXTURE_CUBE_MAP_POSITIVE_Y,5,GL_RGB8, 2, 2,1,GL_RGB,GL_UNSIGNED_BYTE,   16,0x55,0xFF,0x55,0x55},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,5,GL_RGB8, 2, 2,1,GL_RGB,GL_UNSIGNED_BYTE,   16,0x55,0xFF,0xFF,0x55},
			{GL_TEXTURE_CUBE_MAP_POSITIVE_Z,5,GL_RGB8, 2, 2,1,GL_RGB,GL_UNSIGNED_BYTE,   16,0x55,0x55,0xFF,0x55},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,5,GL_RGB8, 2, 2,1,GL_RGB,GL_UNSIGNED_BYTE,   16,0xFF,0x55,0xFF,0xFF},
			{GL_TEXTURE_CUBE_MAP_POSITIVE_X,6,GL_RGB8, 1, 1,1,GL_RGB,GL_UNSIGNED_BYTE,    4,0xFF,0x66,0x66,0x00},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_X,6,GL_RGB8, 1, 1,1,GL_RGB,GL_UNSIGNED_BYTE,    4,0xFF,0xFF,0x66,0x00},
			{GL_TEXTURE_CUBE_MAP_POSITIVE_Y,6,GL_RGB8, 1, 1,1,GL_RGB,GL_UNSIGNED_BYTE,    4,0x66,0xFF,0x66,0x00},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,6,GL_RGB8, 1, 1,1,GL_RGB,GL_UNSIGNED_BYTE,    4,0x66,0xFF,0xFF,0x00},
			{GL_TEXTURE_CUBE_MAP_POSITIVE_Z,6,GL_RGB8, 1, 1,1,GL_RGB,GL_UNSIGNED_BYTE,    4,0x66,0x66,0xFF,0x00},
			{GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,6,GL_RGB8, 1, 1,1,GL_RGB,GL_UNSIGNED_BYTE,    4,0xFF,0x66,0xFF,0x00} }});
}


TEST_CASE("ktxtest/ktx/valid/composition/mipmap_1of0_levels.ktx")
{
	testValid("ktxtest/ktx/valid/composition/mipmap_1of0_levels.ktx", {
		GL_TEXTURE_2D,2,1,GL_R8,64,64,1,false,false,true, {
			{GL_TEXTURE_2D,0,GL_R8,64,64,1,GL_RED,GL_UNSIGNED_BYTE,4096,0xCC,0xCC,0xCC,0xCC} }});
}


TEST_CASE("ktxtest/ktx/valid/composition/mipmap_1of1_levels.ktx")
{
	testValid("ktxtest/ktx/valid/composition/mipmap_1of1_levels.ktx", {
		GL_TEXTURE_2D,2,1,GL_R8,64,64,1,false,false,false, {
			{GL_TEXTURE_2D,0,GL_R8,64,64,1,GL_RED,GL_UNSIGNED_BYTE,4096,0xCC,0xCC,0xCC,0xCC} }});
}


TEST_CASE("ktxtest/ktx/valid/composition/mipmap_3of7_levels.ktx")
{
	testValid("ktxtest/ktx/valid/composition/mipmap_3of7_levels.ktx", {
		GL_TEXTURE_2D,2,3,GL_R8,64,64,1,false,false,false, {
			{GL_TEXTURE_2D,0,GL_R8,64,64,1,GL_RED,GL_UNSIGNED_BYTE,4096,0xCC,0xCC,0xCC,0xCC},
			{GL_TEXTURE_2D,1,GL_R8,32,32,1,GL_RED,GL_UNSIGNED_BYTE,1024,0x11,0x11,0x11,0x11},
			{GL_TEXTURE_2D,2,GL_R8,16,16,1,GL_RED,GL_UNSIGNED_BYTE, 256,0x22,0x22,0x22,0x22} }});
}


TEST_CASE("ktxtest/ktx/valid/composition/mipmap_7of7_levels.ktx")
{
	testValid("ktxtest/ktx/valid/composition/mipmap_7of7_levels.ktx", {
		GL_TEXTURE_2D,2,7,GL_R8,64,64,1,false,false,false, {
			{GL_TEXTURE_2D,0,GL_R8,64,64,1,GL_RED,GL_UNSIGNED_BYTE,4096,0xCC,0xCC,0xCC,0xCC},
			{GL_TEXTURE_2D,1,GL_R8,32,32,1,GL_RED,GL_UNSIGNED_BYTE,1024,0x11,0x11,0x11,0x11},
			{GL_TEXTURE_2D,2,GL_R8,16,16,1,GL_RED,GL_UNSIGNED_BYTE, 256,0x22,0x22,0x22,0x22},
			{GL_TEXTURE_2D,3,GL_R8, 8, 8,1,GL_RED,GL_UNSIGNED_BYTE,  64,0x33,0x33,0x33,0x33},
			{GL_TEXTURE_2D,4,GL_R8, 4, 4,1,GL_RED,GL_UNSIGNED_BYTE,  16,0x44,0x44,0x44,0x44},
			{GL_TEXTURE_2D,5,GL_R8, 2, 2,1,GL_RED,GL_UNSIGNED_BYTE,   8,0x55,0x55,0x00,0x00},
			{GL_TEXTURE_2D,6,GL_R8, 1, 1,1,GL_RED,GL_UNSIGNED_BYTE,   4,0x66,0x00,0x00,0x00} }});
}
